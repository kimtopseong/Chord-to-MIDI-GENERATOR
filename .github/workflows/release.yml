name: Build & Release (thin mac + win)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.os }} • ${{ matrix.asset_suffix }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS thin builds by runner architecture
          - os: macos-14
            spec_file: mac.spec
            asset_suffix: mac-arm64
          - os: macos-13
            spec_file: mac.spec
            asset_suffix: mac-x86_64
          # Windows
          - os: windows-latest
            spec_file: win.spec
            asset_suffix: win-x86

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Write TUF root.json from secret
        shell: bash
        run: |
          if [ -n "${{ secrets.TUF_ROOT_JSON }}" ]; then
            cat > root.json <<'JSON'
${{ secrets.TUF_ROOT_JSON }}
JSON
            echo "root.json created ($(wc -c < root.json) bytes)"
          else
            echo "TUF_ROOT_JSON secret is empty or not set; skipping root.json creation"
          fi

      - name: Verify app resources
        shell: bash
        run: |
          echo "Listing repository root:"
          pwd
          ls -la
          echo "Checking known resource files:"
          for f in loading.png pro_theme.json root.json; do
            if [ -f "$f" ]; then
              echo "✓ found $f"
            else
              echo "✗ missing $f"
            fi
          done

      # Build (macOS) — no --target-arch when using a .spec file
      - name: Build (macOS)
        if: runner.os == 'macOS'
        run: |
          pyinstaller --clean --noconfirm ${{ matrix.spec_file }}

      # Build (Windows)
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pyinstaller --clean --noconfirm ${{ matrix.spec_file }}

      # Package (macOS)
      - name: Package (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          VERSION="${{ github.ref_name }}"
          SUFFIX="${{ matrix.asset_suffix }}"
          ASSET="Chord-to-MIDI-GENERATOR-${VERSION}-${SUFFIX}.zip"
          (cd dist && zip -r "../${ASSET}" .)
          echo "ASSET_PATH=${ASSET}" >> $GITHUB_ENV

      # Package (Windows)
      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VERSION = "${{ github.ref_name }}"
          $SUFFIX = "${{ matrix.asset_suffix }}"
          $ASSET  = "Chord-to-MIDI-GENERATOR-$VERSION-$SUFFIX.zip"
          Compress-Archive -Path dist\* -DestinationPath $ASSET -Force
          "ASSET_PATH=$ASSET" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_suffix }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: true
          path: release

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*.zip
          draft: false
          prerelease: false
