name: Build & Release (thin mac + win)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build - ${{ matrix.os }} - ${{ matrix.asset_suffix }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            spec_file: mac.spec
            asset_suffix: mac-arm64
          - os: macos-13
            spec_file: mac.spec
            asset_suffix: mac-x86_64
          - os: windows-latest
            spec_file: win.spec
            asset_suffix: win-x86

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Write root.json from secret (macOS)
        if: runner.os == 'macOS'
        env:
          TUF_ROOT_JSON: ${{ secrets.TUF_ROOT_JSON }}
        run: |
          python -c "import os; open('root.json','wb').write(os.environ.get('TUF_ROOT_JSON','').encode('utf-8'))"
          test -f root.json && echo 'root.json written'

      - name: Write root.json from secret (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          TUF_ROOT_JSON: ${{ secrets.TUF_ROOT_JSON }}
        run: |
          Set-Content -LiteralPath root.json -Value $env:TUF_ROOT_JSON -Encoding utf8 -NoNewline
          if (Test-Path root.json) { Write-Host "root.json written" }

      - name: Sanitize mac.spec (remove any target_arch)
        if: runner.os == 'macOS'
        run: |
          python -c "import re; p='mac.spec'; s=open(p,'r',encoding='utf-8').read(); s=re.sub(r',\s*target_arch\s*=\s*([\"\']).*?\1','',s); s=re.sub(r'\s*target_arch\s*=\s*([\"\']).*?\1,?','',s); open(p,'w',encoding='utf-8').write(s)"
          if grep -n "target_arch" mac.spec; then
            echo "ERROR: target_arch still present in mac.spec"; exit 1
          else
            echo "OK: no target_arch in mac.spec"
          fi

      - name: Build (macOS)
        if: runner.os == 'macOS'
        run: |
          pyinstaller --clean --noconfirm ${{ matrix.spec_file }}

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pyinstaller --clean --noconfirm ${{ matrix.spec_file }}

      - name: Package (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          VERSION="${{ github.ref_name }}"
          SUFFIX="${{ matrix.asset_suffix }}"
          ASSET="Chord-to-MIDI-GENERATOR-${VERSION}-${SUFFIX}.zip"
          (cd dist && zip -r "../${ASSET}" .)
          echo "ASSET_PATH=${ASSET}" >> $GITHUB_ENV

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VERSION = "${{ github.ref_name }}"
          $SUFFIX = "${{ matrix.asset_suffix }}"
          $ASSET  = "Chord-to-MIDI-GENERATOR-$VERSION-$SUFFIX.zip"
          Compress-Archive -Path dist\* -DestinationPath $ASSET -Force
          "ASSET_PATH=$ASSET" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_suffix }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: true
          path: release

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*.zip
          draft: false
          prerelease: false
