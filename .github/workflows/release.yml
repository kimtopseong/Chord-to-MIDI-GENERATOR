name: Build, Release, and Update TUF Metadata

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  # ====================================================================
  # 1. 여러 플랫폼용 파일을 동시에 빌드하는 작업
  # ====================================================================
  build:
    strategy:
      matrix:
        include:
          # macOS Universal 빌드 (arm64 + x86_64)
          - os: macos-latest
            target-arch: universal2
            asset-name-suffix: 'mac-universal'

          # Windows x86 빌드
          - os: windows-latest
            target-arch: x86
            asset-name-suffix: 'win-x86'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: pyinstaller --noconfirm --target-arch ${{ matrix.target-arch }} Chord-to-MIDI-GENERATOR.spec

      - name: Package the application
        shell: bash
        run: |
          VERSION="${{ github.ref_name }}"
          SUFFIX="${{ matrix.asset-name-suffix }}"
          ASSET_FILENAME="Chord-to-MIDI-GENERATOR-${VERSION}-${SUFFIX}.zip"
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows는 PowerShell의 Compress-Archive를 사용해 .zip으로 압축
            Compress-Archive -Path dist/* -DestinationPath "${ASSET_FILENAME}"
          else
            # macOS도 내장 zip 명령어를 사용해 .zip으로 압축
            (cd dist && zip -r "../${ASSET_FILENAME}" .)
          fi
          
          echo "ASSET_PATH=${ASSET_FILENAME}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.asset-name-suffix }}
          path: ${{ env.ASSET_PATH }}

  # ====================================================================
  # 2. 모든 빌드가 끝난 후, 파일들을 모아서 릴리즈하는 작업
  # ====================================================================
  release:
    # 'build' 작업이 모두 성공해야만 실행됩니다.
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install tufup
        run: pip install tufup

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create TUF key files from secrets
        run: |
          mkdir -p keys
          echo "${{ secrets.TUF_ROOT_KEY }}" > keys/root.key
          echo "${{ secrets.TUF_TARGETS_KEY }}" > keys/targets.key
          echo "${{ secrets.TUF_SNAPSHOT_KEY }}" > keys/snapshot.key
          echo "${{ secrets.TUF_TIMESTAMP_KEY }}" > keys/timestamp.key

      - name: Create and Sign TUF metadata for all artifacts
        run: |
          export VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          
          # 각 빌드 결과물에 대해 targets add 실행
          TUF_KEY_PASSWORD=${{ secrets.TUF_TARGETS_KEY_PASSWORD }} tufup targets add "$VERSION" "artifacts/app-mac-universal/Chord-to-MIDI-GENERATOR-${{ github.ref_name }}-mac-universal.zip" keys
          TUF_KEY_PASSWORD=${{ secrets.TUF_TARGETS_KEY_PASSWORD }} tufup targets add "$VERSION" "artifacts/app-win-x86/Chord-to-MIDI-GENERATOR-${{ github.ref_name }}-win-x86.zip" keys

          # 모든 변경사항에 대해 서명
          TUF_KEY_PASSWORD=${{ secrets.TUF_TARGETS_KEY_PASSWORD }} tufup sign targets keys
          TUF_KEY_PASSWORD=${{ secrets.TUF_SNAPSHOT_KEY_PASSWORD }} tufup sign snapshot keys
          TUF_KEY_PASSWORD=${{ secrets.TUF_TIMESTAMP_KEY_PASSWORD }} tufup sign timestamp keys

      - name: Push metadata to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repository
          publish_branch: gh-pages
          force_orphan: true

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          # artifacts/ 폴더 아래의 모든 압축파일을 찾아 업로드
          files: artifacts/**/*