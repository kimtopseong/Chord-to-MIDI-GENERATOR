name: Build, Release, and Update TUF metadata

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build - ${{ matrix.asset_suffix }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            asset_suffix: mac-arm64
            build_cmd: pyinstaller --noconfirm --windowed main.py
            zip_cmd: |
              VERSION="${{ github.ref_name }}"
              ASSET="Chord-to-MIDI-GENERATOR-$VERSION-mac-arm64.zip"
              # dist 전체를 패키징 (필요시 앱 폴더로 조정)
              ditto -c -k --sequesterRsrc --keepParent "dist" "$ASSET"
              echo "ASSET_PATH=$ASSET" >> "$GITHUB_ENV"
          - os: macos-13
            asset_suffix: mac-x86_64
            build_cmd: pyinstaller --noconfirm --windowed main.py
            zip_cmd: |
              VERSION="${{ github.ref_name }}"
              ASSET="Chord-to-MIDI-GENERATOR-$VERSION-mac-x86_64.zip"
              ditto -c -k --sequesterRsrc --keepParent "dist" "$ASSET"
              echo "ASSET_PATH=$ASSET" >> "$GITHUB_ENV"
          - os: windows-latest
            asset_suffix: win-x86
            build_cmd: pyinstaller --noconfirm --windowed main.py
            zip_cmd: |
              $VERSION = "${{ github.ref_name }}"
              $ASSET  = "Chord-to-MIDI-GENERATOR-$VERSION-win-x86.zip"
              Compress-Archive -Path dist\* -DestinationPath $ASSET -Force
              "ASSET_PATH=$ASSET" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: ${{ matrix.build_cmd }}

      - name: Package artifact (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: ${{ matrix.zip_cmd }}

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ${{ matrix.zip_cmd }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_suffix }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release & Publish TUF metadata
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install tufup
        run: pip install "tufup==0.9.0"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true

      - name: Create TUF key files from secrets
        env:
          TUF_ROOT_KEY: ${{ secrets.TUF_ROOT_KEY }}
          TUF_TARGETS_KEY: ${{ secrets.TUF_TARGETS_KEY }}
          TUF_SNAPSHOT_KEY: ${{ secrets.TUF_SNAPSHOT_KEY }}
          TUF_TIMESTAMP_KEY: ${{ secrets.TUF_TIMESTAMP_KEY }}
        run: |
          mkdir -p keys
          printf "%s" "$TUF_ROOT_KEY" > keys/root
          printf "%s" "$TUF_TARGETS_KEY" > keys/targets
          printf "%s" "$TUF_SNAPSHOT_KEY" > keys/snapshot
          printf "%s" "$TUF_TIMESTAMP_KEY" > keys/timestamp

      - name: Prepare TUF repository dirs (non-interactive)
        run: |
          mkdir -p repository/metadata repository/targets
          # (선택) 루트 메타데이터를 시드하고 싶으면 시크릿으로 전달
          if [ -n "${{ secrets.TUF_ROOT_JSON }}" ]; then
            printf "%s" "${{ secrets.TUF_ROOT_JSON }}" > repository/metadata/root.json
          elif [ -f root.json ]; then
            cp -f root.json repository/metadata/root.json
          fi

      - name: Create and Sign TUF metadata
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF_NAME#v}"

          # ⚠️ tufup 0.9.0은 targets add에 key_dirs(=keys)가 3번째 위치 인자로 필요
          tufup targets add "$VERSION" "artifacts/Chord-to-MIDI-GENERATOR-${GITHUB_REF_NAME}-mac-arm64.zip" keys
          tufup targets add "$VERSION" "artifacts/Chord-to-MIDI-GENERATOR-${GITHUB_REF_NAME}-mac-x86_64.zip" keys
          tufup targets add "$VERSION" "artifacts/Chord-to-MIDI-GENERATOR-${GITHUB_REF_NAME}-win-x86.zip" keys

          # sign 서브커맨드에는 keys 인자 넣지 말 것
          tufup sign targets
          tufup sign snapshot
          tufup sign timestamp

          # 디버그용 리스트
          find repository -maxdepth 2 -type f -print

      - name: Publish metadata to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repository
          publish_branch: gh-pages
          force_orphan: true

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip
          draft: false
          prerelease: false